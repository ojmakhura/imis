// Generated by andromda-angular cartridge (view\components\component.ts.vsl) DO NOT EDIT
import { AfterViewInit, Component, inject, Input, OnDestroy, OnInit, ViewChild, effect } from '@angular/core';
import { FormsModule, ReactiveFormsModule, FormControl } from '@angular/forms';
import { firstValueFrom, Observable, map, of, startWith } from 'rxjs';
import { CommonModule } from '@angular/common';
import { TranslateModule } from '@ngx-translate/core';
import { MaterialModule } from '@app/material.module';
import { CsvModule } from '@ctrl/ngx-csv';
import { PolicyTypeVO } from '@app/model/bw/co/roguesystems/imis/policy/type/policy-type-vo';
import { CustomerVO } from '@app/model/bw/co/roguesystems/imis/customer/customer-vo';
import { PolicyEditorComponent } from './policy-editor.component';
import { TableComponent } from '@app/components/table/table.component';
import { PolicyApiStore } from '@app/store/bw/co/roguesystems/imis/policy/policy-api.store';
import { PolicyTypeApiStore } from '@app/store/bw/co/roguesystems/imis/policy/type/policy-type-api.store';
import { CustomerApiStore } from '@app/store/bw/co/roguesystems/imis/customer/customer-api.store';
import { PolicyVO } from '@app/model/bw/co/roguesystems/imis/policy/policy-vo';
import { CustomerEditorImplComponent } from '../customer/customer-editor-impl.component';

@Component({
  selector: 'app-policy-editor',
  templateUrl: './policy-editor.component.html',
  styleUrls: [],
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    TranslateModule,
    MaterialModule,
    CsvModule,
    TableComponent,
    CustomerEditorImplComponent,
  ],
})
export class PolicyEditorImplComponent extends PolicyEditorComponent {
  policyStore = inject(PolicyApiStore);
  policyTypeStore = inject(PolicyTypeApiStore);
  searchingPolicyTypes = false;

  searchingCustomers = false;

  test = new FormControl();

  constructor() {
    super();

    effect(() => {
      let policy = this.policyStore.data();

      if (policy) {
        this.formGroupControl.patchValue(policy);
      }

      let policyTypes = this.policyTypeStore.dataList().map((policyType: PolicyTypeVO) => {
        if (!policyType.modifiedAt) {
          policyType.modifiedAt = null;
        }

        if (!policyType.modifiedBy) {
          policyType.modifiedBy = null;
        }

        return policyType;
      });

      if (this.searchingPolicyTypes) {
        console.log(policyTypes);
        this.policyTypeFilteredList$ = of(policyTypes);
        this.searchingPolicyTypes = false;
      }
    });
  }

  override filterPolicyType(): void {
    this.searchingPolicyTypes = true;
    let search = this.policyTypeFilterCtrl.value;

    if (!search) {
      search = '';
    } else {
      search = search.toLowerCase();
    }

    this.policyTypeStore.search({
      criteria: search,
    });
  }

  override policyTypeCompare(o1: PolicyTypeVO | any, o2: PolicyTypeVO | any) {
    return o1?.id === o2?.id;
  }

  get policy(): PolicyVO {
    let policy = this.formGroupControl.value as PolicyVO;
    policy.customer = this.customer?.formGroupControl?.value;

    return policy;
  }
}
