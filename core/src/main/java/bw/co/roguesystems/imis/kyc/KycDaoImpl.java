// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.roguesystems.imis.kyc;

import bw.co.roguesystems.imis.policy.PolicyRepository;
import org.springframework.stereotype.Repository;

/**
 * @see Kyc
 */
@Repository("kycDao")
public class KycDaoImpl
    extends KycDaoBase
{
    
    public KycDaoImpl(
        PolicyRepository policyRepository,
        KycRepository kycRepository
    ) {

        super(
            policyRepository,
            kycRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toKycVO(
        Kyc source,
        KycVO target)
    {
        // TODO verify behavior of toKycVO
        super.toKycVO(source, target);
        // WARNING! No conversion for target.policy (can't convert source.getPolicy():bw.co.roguesystems.imis.policy.Policy to bw.co.roguesystems.imis.policy.PolicyVO
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public KycVO toKycVO(final Kyc entity)
    {
        // TODO verify behavior of toKycVO
        return super.toKycVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Kyc loadKycFromKycVO(KycVO kycVO)
    {
        // TODO implement loadKycFromKycVO
        throw new UnsupportedOperationException("bw.co.roguesystems.imis.kyc.loadKycFromKycVO(KycVO) not yet implemented.");

        /* A typical implementation looks like this:
        if (kycVO.getId() == null)
        {
            return  Kyc.Factory.newInstance();
        }
        else
        {
            return this.load(kycVO.getId());
        }
        */
    }

    /**
     * {@inheritDoc}
     */
    public Kyc kycVOToEntity(KycVO kycVO)
    {
        // TODO verify behavior of kycVOToEntity
        Kyc entity = this.loadKycFromKycVO(kycVO);
        this.kycVOToEntity(kycVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void kycVOToEntity(
        KycVO source,
        Kyc target,
        boolean copyIfNull)
    {
        // TODO verify behavior of kycVOToEntity
        super.kycVOToEntity(source, target, copyIfNull);
    }
}