// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.roguesystems.imis.policy;

import bw.co.roguesystems.imis.customer.Customer;
import bw.co.roguesystems.imis.customer.CustomerRepository;
import bw.co.roguesystems.imis.customer.CustomerVO;
import bw.co.roguesystems.imis.kyc.KycRepository;
import bw.co.roguesystems.imis.policy.beneficiary.BeneficiaryRepository;
import bw.co.roguesystems.imis.policy.type.PolicyType;
import bw.co.roguesystems.imis.policy.type.PolicyTypeRepository;

import java.time.LocalDate;
import java.util.Date;

import org.springframework.stereotype.Repository;

/**
 * @see Policy
 */
@Repository("policyDao")
public class PolicyDaoImpl
    extends PolicyDaoBase
{

    public PolicyDaoImpl(PolicyTypeRepository policyTypeRepository, CustomerRepository customerRepository,
            BeneficiaryRepository beneficiaryRepository, KycRepository kycRepository,
            PolicyRepository policyRepository) {
        super(policyTypeRepository, customerRepository, beneficiaryRepository, policyRepository);
        //TODO Auto-generated constructor stub
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toPolicyVO(
        Policy source,
        PolicyVO target)
    {
        // TODO verify behavior of toPolicyVO
        super.toPolicyVO(source, target);
        // WARNING! No conversion for target.startDate (can't convert source.getStartDate():java.util.Date to java.util.Date
        target.setStartDate(LocalDate.of(source.getStartDate().getYear(), source.getStartDate().getMonth(), source.getStartDate().getDay()));
        // WARNING! No conversion for target.policyType (can't convert source.getPolicyType():bw.co.roguesystems.imis.policy.type.PolicyType to bw.co.roguesystems.imis.policy.type.PolicyTypeVO
        if(source.getPolicyType() != null) {
            target.setPolicyType(policyTypeDao.toPolicyTypeVO(source.getPolicyType()));

        }
        // WARNING! No conversion for target.customer (can't convert source.getCustomer():bw.co.roguesystems.imis.customer.Customer to bw.co.roguesystems.imis.customer.CustomerVO
        if(source.getCustomer() != null) {

            CustomerVO customer = new CustomerVO();

            customerDao.toCustomerVO(source.getCustomer(), customer);
        }
        // WARNING! No conversion for target.endDate (can't convert source.getEndDate():java.util.Date to java.util.Date
        if(source.getEndDate() != null) {
            target.setEndDate(LocalDate.of(source.getEndDate().getYear(), source.getEndDate().getMonth(), source.getEndDate().getDay()));
        }
        
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PolicyVO toPolicyVO(final Policy entity)
    {
        // TODO verify behavior of toPolicyVO
        return super.toPolicyVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Policy loadPolicyFromPolicyVO(PolicyVO policyVO)
    {
        if (policyVO.getId() == null)
        {
            return  Policy.Factory.newInstance();
        }
        else
        {
            return this.load(policyVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public Policy policyVOToEntity(PolicyVO policyVO)
    {
        // TODO verify behavior of policyVOToEntity
        Policy entity = this.loadPolicyFromPolicyVO(policyVO);
        this.policyVOToEntity(policyVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void policyVOToEntity(
        PolicyVO source,
        Policy target,
        boolean copyIfNull)
    {
        // TODO verify behavior of policyVOToEntity
        super.policyVOToEntity(source, target, copyIfNull);
        // No conversion for target.startDate (can't convert source.getStartDate():java.util.Date to java.util.Date
            target.setStartDate(new Date(source.getStartDate().getYear(), source.getStartDate().getMonthValue(), source.getStartDate().getDayOfMonth()));
        
        // No conversion for target.endDate (can't convert source.getEndDate():java.util.Date to java.util.Date
        if(source.getEndDate() != null) {
            target.setEndDate(new Date(source.getEndDate().getYear(), source.getEndDate().getMonthValue(), source.getEndDate().getDayOfMonth()));
        }

        if(source.getPolicyType() != null) {

            PolicyType type = PolicyType.Factory.newInstance();

            if(source.getPolicyType().getId() != null && source.getPolicyType().getId() > 0) {
                type = policyTypeRepository.getReferenceById(source.getPolicyType().getId());
            } else {

                policyTypeDao.policyTypeVOToEntity(source.getPolicyType(), type, copyIfNull);

            }

            target.setPolicyType(type);

        }

        if(source.getCustomer() != null) {

            Customer customer = Customer.Factory.newInstance();

            if(source.getCustomer().getId() != null && source.getCustomer().getId() > 0) {
                customer = customerRepository.getReferenceById(source.getCustomer().getId());
            } else {

                customerDao.customerVOToEntity(source.getCustomer(), customer, copyIfNull);

            }

            target.setCustomer(customer);

        }
    }
}